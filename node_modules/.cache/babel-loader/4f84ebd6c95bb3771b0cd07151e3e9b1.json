{"ast":null,"code":"import { ADD_T0_CART, DEC_QTY, EMPTY_CART, INC_QTY, REMOVE_FROM_CART } from \"./commerce-action\";\nexport const commerceReducer = (state, action) => {\n  switch (action.type) {\n    case ADD_T0_CART:\n      const existingProductIndex = state.cart.findIndex(_ref => {\n        let {\n          id,\n          size\n        } = _ref;\n        return id === action.payload.id && size === action.payload.size;\n      });\n      if (!existingProductIndex) return { ...state,\n        basket: [...state.basket, action.payload]\n      };\n\n    case REMOVE_FROM_CART:\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.payload);\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`Can't remove product(id: ${action.payload}) as its not in the basket!`);\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    /*     return {\n             ...state,\n             basket: state.basket.filter( item => item.id !== action.payload)\n         } */\n\n    case INC_QTY:\n      return { ...state,\n        basket: state.basket.map(item => item.id === action.payload ? { ...item,\n          qty: item.qty + 1\n        } : { ...item\n        })\n      };\n\n    case DEC_QTY:\n      return { ...state,\n        basket: state.basket.map(item => item.id === action.payload ? { ...item,\n          qty: item.qty - 1\n        } : { ...item\n        })\n      };\n\n    case EMPTY_CART:\n      return { ...state,\n        basket: []\n      };\n\n    default:\n      return state;\n  }\n};\n/* \n            let newBasket = [...state.basket]\n\n            if (index > 0) {\n                newBasket.splice(index,1)\n \n            }\n            else {\n                alert(\"can't remove product\")\n            } \n            \n            \n             ...state,\n                basket: state.basket.filter(item => item.id !== action.payload)*/","map":{"version":3,"sources":["/Users/admin/ReactProjects/reactProject/my-app/src/context/commerce-reducer.js"],"names":["ADD_T0_CART","DEC_QTY","EMPTY_CART","INC_QTY","REMOVE_FROM_CART","commerceReducer","state","action","type","existingProductIndex","cart","findIndex","id","size","payload","basket","index","basketItem","newBasket","splice","console","warn","map","item","qty"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,UAA/B,EAA2CC,OAA3C,EAAoDC,gBAApD,QAA4E,mBAA5E;AAKA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,WAAL;AACI,YAAMS,oBAAoB,GAAGH,KAAK,CAACI,IAAN,CAAWC,SAAX,CACzB;AAAA,YAAC;AAAEC,UAAAA,EAAF;AAAMC,UAAAA;AAAN,SAAD;AAAA,eAAiBD,EAAE,KAAKL,MAAM,CAACO,OAAP,CAAeF,EAAtB,IAA4BC,IAAI,KAAKN,MAAM,CAACO,OAAP,CAAeD,IAArE;AAAA,OADyB,CAA7B;AAKA,UAAI,CAACJ,oBAAL,EAA2B,OAAO,EAE9B,GAAGH,KAF2B;AAEpBS,QAAAA,MAAM,EAAE,CAAC,GAAGT,KAAK,CAACS,MAAV,EAAkBR,MAAM,CAACO,OAAzB;AAFY,OAAP;;AAM/B,SAAKV,gBAAL;AACI,YAAMY,KAAK,GAAGV,KAAK,CAACS,MAAN,CAAaJ,SAAb,CACTM,UAAD,IAAgBA,UAAU,CAACL,EAAX,KAAkBL,MAAM,CAACO,OAD/B,CAAd;AAIA,UAAII,SAAS,GAAG,CAAC,GAAGZ,KAAK,CAACS,MAAV,CAAhB;;AAEA,UAAIC,KAAK,IAAI,CAAb,EAAgB;AACZE,QAAAA,SAAS,CAACC,MAAV,CAAiBH,KAAjB,EAAwB,CAAxB;AACH,OAFD,MAEO;AACHI,QAAAA,OAAO,CAACC,IAAR,CACK,4BAA2Bd,MAAM,CAACO,OAAQ,6BAD/C;AAGH;;AAED,aAAO,EACH,GAAGR,KADA;AAEHS,QAAAA,MAAM,EAAEG;AAFL,OAAP;;AAML;AACP;AACA;AACA;;AAEQ,SAAKf,OAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHS,QAAAA,MAAM,EAAET,KAAK,CAACS,MAAN,CAAaO,GAAb,CAAiBC,IAAI,IAAKA,IAAI,CAACX,EAAL,KAAYL,MAAM,CAACO,OAAnB,GAA4B,EAAC,GAAGS,IAAJ;AAAUC,UAAAA,GAAG,EAAED,IAAI,CAACC,GAAL,GAAW;AAA1B,SAA5B,GAA2D,EAAC,GAAGD;AAAJ,SAArF;AAFL,OAAP;;AAIJ,SAAKtB,OAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHS,QAAAA,MAAM,EAAET,KAAK,CAACS,MAAN,CAAaO,GAAb,CAAiBC,IAAI,IAAIA,IAAI,CAACX,EAAL,KAAYL,MAAM,CAACO,OAAnB,GAA6B,EAAE,GAAGS,IAAL;AAAWC,UAAAA,GAAG,EAAED,IAAI,CAACC,GAAL,GAAW;AAA3B,SAA7B,GAA8D,EAAE,GAAGD;AAAL,SAAvF;AAFL,OAAP;;AAIJ,SAAKrB,UAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHS,QAAAA,MAAM,EAAC;AAFJ,OAAP;;AAOJ;AACI,aAAOT,KAAP;AA1DR;AA6DH,CA9DM;AAgEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ADD_T0_CART, DEC_QTY, EMPTY_CART, INC_QTY, REMOVE_FROM_CART,} from \"./commerce-action\";\n\n\n\n\nexport const commerceReducer = (state,action) => {\n    switch (action.type) {\n        case ADD_T0_CART:\n            const existingProductIndex = state.cart.findIndex(\n                ({ id, size}) => id === action.payload.id && size === action.payload.size\n            )\n  \n          \n            if (!existingProductIndex) return {\n                \n                ...state, basket: [...state.basket, action.payload]\n            }\n            \n         \n        case REMOVE_FROM_CART:\n            const index = state.basket.findIndex(\n                (basketItem) => basketItem.id === action.payload\n            );\n\n            let newBasket = [...state.basket];\n\n            if (index >= 0) {\n                newBasket.splice(index, 1);\n            } else {\n                console.warn(\n                    `Can't remove product(id: ${action.payload}) as its not in the basket!`\n                )\n            }\n\n            return {\n                ...state,\n                basket: newBasket\n            }\n\n            \n       /*     return {\n                ...state,\n                basket: state.basket.filter( item => item.id !== action.payload)\n            } */\n            \n        case INC_QTY:\n            return {\n                ...state,\n                basket: state.basket.map(item =>  item.id === action.payload? {...item, qty: item.qty + 1} : {...item} )\n            }\n        case DEC_QTY:\n            return {\n                ...state,\n                basket: state.basket.map(item => item.id === action.payload ? { ...item, qty: item.qty - 1 } : { ...item })\n            }\n        case EMPTY_CART: \n            return {\n                ...state,\n                basket:[]\n            }\n            \n\n       \n        default:\n            return state\n    }\n\n}\n\n/* \n            let newBasket = [...state.basket]\n\n            if (index > 0) {\n                newBasket.splice(index,1)\n \n            }\n            else {\n                alert(\"can't remove product\")\n            } \n            \n            \n             ...state,\n                basket: state.basket.filter(item => item.id !== action.payload)*/"]},"metadata":{},"sourceType":"module"}