{"ast":null,"code":"import { ADD_T0_CART, DEC_QTY, EMPTY_CART, INC_QTY, REMOVE_FROM_CART } from \"./commerce-action\";\nexport const commerceReducer = (state, action) => {\n  switch (action.type) {\n    case ADD_T0_CART:\n      const itemExists = state.basket.find(item => item.id === action.payload.id);\n      console.log(itemExists);\n      return { ...state,\n        basket: !itemExists ? [...state.basket, action.payload] : state.basket.map(item => item.id === action.payload.qty + 1)\n      };\n\n    case REMOVE_FROM_CART:\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.payload);\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`Can't remove product(id: ${action.payload}) as its not in the basket!`);\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    /*     return {\n             ...state,\n             basket: state.basket.filter( item => item.id !== action.payload)\n         } */\n\n    case INC_QTY:\n      return { ...state,\n        basket: state.basket.map(item => item.id === action.payload ? { ...item,\n          qty: item.qty + 1\n        } : { ...item\n        })\n      };\n\n    case DEC_QTY:\n      return { ...state,\n        basket: state.basket.map(item => item.id === action.payload ? { ...item,\n          qty: item.qty - 1\n        } : { ...item\n        })\n      };\n\n    case EMPTY_CART:\n      return { ...state,\n        basket: []\n      };\n\n    default:\n      return state;\n  }\n};\n/* \n            let newBasket = [...state.basket]\n\n            if (index > 0) {\n                newBasket.splice(index,1)\n \n            }\n            else {\n                alert(\"can't remove product\")\n            } \n            \n            \n             ...state,\n                basket: state.basket.filter(item => item.id !== action.payload)*/","map":{"version":3,"sources":["/Users/admin/ReactProjects/reactProject/my-app/src/context/commerce-reducer.js"],"names":["ADD_T0_CART","DEC_QTY","EMPTY_CART","INC_QTY","REMOVE_FROM_CART","commerceReducer","state","action","type","itemExists","basket","find","item","id","payload","console","log","map","qty","index","findIndex","basketItem","newBasket","splice","warn"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,UAA/B,EAA2CC,OAA3C,EAAoDC,gBAApD,QAA4E,mBAA5E;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,WAAL;AACI,YAAMS,UAAU,GAAGH,KAAK,CAACI,MAAN,CAAaC,IAAb,CACdC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACO,OAAP,CAAeD,EADtB,CAAnB;AAGAE,MAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AAED,aAAO,EAEH,GAAGH,KAFA;AAEOI,QAAAA,MAAM,EAAE,CAACD,UAAD,GAAc,CAAC,GAAGH,KAAK,CAACI,MAAV,EAAkBH,MAAM,CAACO,OAAzB,CAAd,GAAkDR,KAAK,CAACI,MAAN,CAAaO,GAAb,CAAiBL,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACO,OAAP,CAAeI,GAAf,GAAqB,CAA1D;AAFjE,OAAP;;AAOH,SAAKd,gBAAL;AACI,YAAMe,KAAK,GAAGb,KAAK,CAACI,MAAN,CAAaU,SAAb,CACTC,UAAD,IAAgBA,UAAU,CAACR,EAAX,KAAkBN,MAAM,CAACO,OAD/B,CAAd;AAIA,UAAIQ,SAAS,GAAG,CAAC,GAAGhB,KAAK,CAACI,MAAV,CAAhB;;AAEA,UAAIS,KAAK,IAAI,CAAb,EAAgB;AACZG,QAAAA,SAAS,CAACC,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AACH,OAFD,MAEO;AACHJ,QAAAA,OAAO,CAACS,IAAR,CACK,4BAA2BjB,MAAM,CAACO,OAAQ,6BAD/C;AAGH;;AAED,aAAO,EACH,GAAGR,KADA;AAEHI,QAAAA,MAAM,EAAEY;AAFL,OAAP;;AAML;AACP;AACA;AACA;;AAEQ,SAAKnB,OAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHI,QAAAA,MAAM,EAAEJ,KAAK,CAACI,MAAN,CAAaO,GAAb,CAAiBL,IAAI,IAAKA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACO,OAAnB,GAA4B,EAAC,GAAGF,IAAJ;AAAUM,UAAAA,GAAG,EAAEN,IAAI,CAACM,GAAL,GAAW;AAA1B,SAA5B,GAA2D,EAAC,GAAGN;AAAJ,SAArF;AAFL,OAAP;;AAIJ,SAAKX,OAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHI,QAAAA,MAAM,EAAEJ,KAAK,CAACI,MAAN,CAAaO,GAAb,CAAiBL,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACO,OAAnB,GAA6B,EAAE,GAAGF,IAAL;AAAWM,UAAAA,GAAG,EAAEN,IAAI,CAACM,GAAL,GAAW;AAA3B,SAA7B,GAA8D,EAAE,GAAGN;AAAL,SAAvF;AAFL,OAAP;;AAIJ,SAAKV,UAAL;AAEI,aAAO,EACH,GAAGI,KADA;AAEHI,QAAAA,MAAM,EAAE;AAFL,OAAP;;AASJ;AACI,aAAOJ,KAAP;AA9DR;AAiEH,CAlEM;AAoEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ADD_T0_CART, DEC_QTY, EMPTY_CART, INC_QTY, REMOVE_FROM_CART,} from \"./commerce-action\";\n\nexport const commerceReducer = (state,action) => {\n    switch (action.type) {\n        case ADD_T0_CART:\n            const itemExists = state.basket.find(\n                (item) => item.id === action.payload.id \n            )\n            console.log(itemExists)\n          \n           return {\n                \n               ...state, basket: !itemExists ? [...state.basket, action.payload] : state.basket.map(item => item.id === action.payload.qty + 1 )\n                \n            }\n          \n         \n        case REMOVE_FROM_CART:\n            const index = state.basket.findIndex(\n                (basketItem) => basketItem.id === action.payload\n            );\n\n            let newBasket = [...state.basket];\n\n            if (index >= 0) {\n                newBasket.splice(index, 1);\n            } else {\n                console.warn(\n                    `Can't remove product(id: ${action.payload}) as its not in the basket!`\n                )\n            }\n\n            return {\n                ...state,\n                basket: newBasket\n            }\n\n            \n       /*     return {\n                ...state,\n                basket: state.basket.filter( item => item.id !== action.payload)\n            } */\n            \n        case INC_QTY:\n            return {\n                ...state,\n                basket: state.basket.map(item =>  item.id === action.payload? {...item, qty: item.qty + 1} : {...item} )\n            }\n        case DEC_QTY:\n            return {\n                ...state,\n                basket: state.basket.map(item => item.id === action.payload ? { ...item, qty: item.qty - 1 } : { ...item })\n            }\n        case EMPTY_CART:\n            \n            return {\n                ...state,\n                basket: []\n                 \n            };\n        \n          \n\n       \n        default:\n            return state\n    }\n\n}\n\n/* \n            let newBasket = [...state.basket]\n\n            if (index > 0) {\n                newBasket.splice(index,1)\n \n            }\n            else {\n                alert(\"can't remove product\")\n            } \n            \n            \n             ...state,\n                basket: state.basket.filter(item => item.id !== action.payload)*/"]},"metadata":{},"sourceType":"module"}